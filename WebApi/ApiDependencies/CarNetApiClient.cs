//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Server
{
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CarNetApiClient 
    {
        private string _baseUrl = "https://api.carnet.ai/v2/mmg";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public CarNetApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Detects and recognizes vehicles in photo</summary>
        /// <param name="box_offset">Minimum allowed distance in pixels between the edge of the image and the edge of the car's bounding box.</param>
        /// <param name="box_min_width">Minimum allowed width in pixels of the car's bounding box</param>
        /// <param name="box_min_height">Minimum allowed height in pixels of the car's bounding box</param>
        /// <param name="box_min_ratio">Minimum allowed ratio between car's bounding box width and height.</param>
        /// <param name="box_max_ratio">Maximum allowed ratio between car's bounding box width and height.</param>
        /// <param name="box_select">Sets bounding box selection strategy. Only selected boxes are used to run car model recognition algorithms
        /// 
        /// - **all** - images within all bounding boxes will be processed
        /// - **center** - the bounding box closest to the center of the image will be processed
        /// - **largest** - the bounding box with the largest area will be processed</param>
        /// <param name="features">Defines what features you would like to extract from the image. 
        /// 
        /// - **mm** - car model, which also reflects car make
        /// - **mmg** - car generation, which also reflects car model and make 
        /// - **color** - car body color
        /// - **angle** - car angle
        /// 
        /// Note: **mm** and **mmg** options are mutually exclusive. You should use mm option if you aim to detect car model, and mmg option if you want to get more granular results, including car generation (production years).</param>
        /// <param name="region">Including region parameter will lead to prioritizing most common brands in the region over those rarely
        /// encountered. While this option helps to produce stronger recognition results for the most common brands and models in the region, rare car brands and models are likely to be incorrectly recognized
        /// 
        /// Regions currently supported:
        /// 
        /// - CIS - Commonwealth of Independent States
        /// - EU - European Union
        /// - NA - North America</param>
        /// <param name="body">Image file to process</param>
        /// <returns>Image was successfully processed by API</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> DetectAsync(int? box_offset, int? box_min_width, int? box_min_height, double? box_min_ratio, double? box_max_ratio, Box_select? box_select, System.Collections.Generic.IEnumerable<Anonymous> features, Region? region, System.IO.Stream body)
        {
            return DetectAsync(box_offset, box_min_width, box_min_height, box_min_ratio, box_max_ratio, box_select, features, region, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Detects and recognizes vehicles in photo</summary>
        /// <param name="box_offset">Minimum allowed distance in pixels between the edge of the image and the edge of the car's bounding box.</param>
        /// <param name="box_min_width">Minimum allowed width in pixels of the car's bounding box</param>
        /// <param name="box_min_height">Minimum allowed height in pixels of the car's bounding box</param>
        /// <param name="box_min_ratio">Minimum allowed ratio between car's bounding box width and height.</param>
        /// <param name="box_max_ratio">Maximum allowed ratio between car's bounding box width and height.</param>
        /// <param name="box_select">Sets bounding box selection strategy. Only selected boxes are used to run car model recognition algorithms
        /// 
        /// - **all** - images within all bounding boxes will be processed
        /// - **center** - the bounding box closest to the center of the image will be processed
        /// - **largest** - the bounding box with the largest area will be processed</param>
        /// <param name="features">Defines what features you would like to extract from the image. 
        /// 
        /// - **mm** - car model, which also reflects car make
        /// - **mmg** - car generation, which also reflects car model and make 
        /// - **color** - car body color
        /// - **angle** - car angle
        /// 
        /// Note: **mm** and **mmg** options are mutually exclusive. You should use mm option if you aim to detect car model, and mmg option if you want to get more granular results, including car generation (production years).</param>
        /// <param name="region">Including region parameter will lead to prioritizing most common brands in the region over those rarely
        /// encountered. While this option helps to produce stronger recognition results for the most common brands and models in the region, rare car brands and models are likely to be incorrectly recognized
        /// 
        /// Regions currently supported:
        /// 
        /// - CIS - Commonwealth of Independent States
        /// - EU - European Union
        /// - NA - North America</param>
        /// <param name="body">Image file to process</param>
        /// <returns>Image was successfully processed by API</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response> DetectAsync(int? box_offset, int? box_min_width, int? box_min_height, double? box_min_ratio, double? box_max_ratio, Box_select? box_select, System.Collections.Generic.IEnumerable<Anonymous> features, Region? region, System.IO.Stream body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/detect?");
            if (box_offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("box_offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(box_offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (box_min_width != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("box_min_width") + "=").Append(System.Uri.EscapeDataString(ConvertToString(box_min_width, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (box_min_height != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("box_min_height") + "=").Append(System.Uri.EscapeDataString(ConvertToString(box_min_height, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (box_min_ratio != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("box_min_ratio") + "=").Append(System.Uri.EscapeDataString(ConvertToString(box_min_ratio, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (box_max_ratio != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("box_max_ratio") + "=").Append(System.Uri.EscapeDataString(ConvertToString(box_max_ratio, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (box_select != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("box_select") + "=").Append(System.Uri.EscapeDataString(ConvertToString(box_select, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (features != null) 
            {
                foreach (var item_ in features) { urlBuilder_.Append(System.Uri.EscapeDataString("features") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (region != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("region") + "=").Append(System.Uri.EscapeDataString(ConvertToString(region, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StreamContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/octet-stream");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized access. You have to provide valid \'api-key\' header to access API", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "429") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Rate limit exceeded", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Box_select
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"center")]
        Center = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"largest")]
        Largest = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = @"mm")]
        Mm = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"mmg")]
        Mmg = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"color")]
        Color = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"angle")]
        Angle = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Region
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CIS")]
        CIS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DEF")]
        DEF = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EU")]
        EU = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response 
    {
        /// <summary>Specifies if uploaded image was processed successfuly. Refer to error property if value equals to __false__</summary>
        [Newtonsoft.Json.JsonProperty("is_success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_success { get; set; }
    
        /// <summary>Describes error details if image processing failed</summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error Error { get; set; }
    
        /// <summary>Array of car bounding boxes detected within the image</summary>
        [Newtonsoft.Json.JsonProperty("detections", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Detections> Detections { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Error 
    {
        /// <summary>- 2 - internal exception
        /// - 3 - image file size is too large
        /// - 4 - empty image
        /// - 5 - image dimentions are too large
        /// - 7 - unsupported image format
        /// - 8 - failed to decode image
        /// - 12 - unsupported parameters
        /// - 14 - multiple files provided
        /// - 15 - unsupported parameter values
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorCode Code { get; set; }
    
        /// <summary>Contains error description</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Detections 
    {
        /// <summary>Describes bounding box coordinates using top left and bottom right corners</summary>
        [Newtonsoft.Json.JsonProperty("box", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Box Box { get; set; }
    
        /// <summary>Describes class of the object detected in the bounding box</summary>
        [Newtonsoft.Json.JsonProperty("class", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Class Class { get; set; }
    
        /// <summary>Describes sub-class of the object detected in the bounding box</summary>
        [Newtonsoft.Json.JsonProperty("subclass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Subclass> Subclass { get; set; }
    
        /// <summary>Describes status of bounding box processing result. Code property equals 0 if bounding box has been process successfully or contains code which describes processing results</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Status Status { get; set; }
    
        /// <summary>Contains TOP-3 detected car models. Only models with probability &gt;= 0.01 are listed</summary>
        [Newtonsoft.Json.JsonProperty("mm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Mm> Mm { get; set; }
    
        /// <summary>Contains TOP-3 detected car generations. Only generations with probability &gt;= 0.01 are listed</summary>
        [Newtonsoft.Json.JsonProperty("mmg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Mmg> Mmg { get; set; }
    
        /// <summary>Contains TOP-3 detected colors. Only colors with probability &gt;= 0.01 are listed. Supported colors are:
        /// 
        /// - Beige (id = 63)                            
        /// - Black (id = 70)                            
        /// - Blue (id = 72)                            
        /// - Brown (id = 74)                            
        /// - Gold (id = 64)                            
        /// - Green (id = 66)
        /// - Grey (id = 68)                            
        /// - Light blue (id = 71)                            
        /// - Orange (id = 76)                            
        /// - Pink (id = 78)                            
        /// - Purple (id = 73)                            
        /// - Red (id = 67)                            
        /// - Silver (id = 77)                            
        /// - Violet (id = 75)                            
        /// - White (id = 65)                            
        /// - Yellow (id = 69)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Color> Color { get; set; }
    
        /// <summary>Contains TOP-3 car positions. Only positions with probability &gt;= 0.01 are listed. Supported positions are:
        /// 
        /// - front
        /// - front-left
        /// - left
        /// - back-left
        /// - back
        /// - back-right
        /// - right
        /// - front-right
        /// </summary>
        [Newtonsoft.Json.JsonProperty("angle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Angle> Angle { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Meta 
    {
        /// <summary>ID of the classifier used to detect car's model</summary>
        [Newtonsoft.Json.JsonProperty("classifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Classifier { get; set; }
    
        /// <summary>MD5 hash of the uploaded image</summary>
        [Newtonsoft.Json.JsonProperty("md5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Md5 { get; set; }
    
        /// <summary>Lists values of parameters to process image</summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Parameters Parameters { get; set; }
    
        /// <summary>Time spent processing the image in seconds</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Time { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ErrorCode
    {
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
        _7 = 7,
    
        _8 = 8,
    
        _12 = 12,
    
        _14 = 14,
    
        _15 = 15,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Box 
    {
        /// <summary>X-coordinate of the bottom right corner</summary>
        [Newtonsoft.Json.JsonProperty("br_x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Br_x { get; set; }
    
        /// <summary>Y-coordinate of the bottom right corner</summary>
        [Newtonsoft.Json.JsonProperty("br_y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Br_y { get; set; }
    
        /// <summary>X-coordinate of the top left corner</summary>
        [Newtonsoft.Json.JsonProperty("tl_x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Tl_x { get; set; }
    
        /// <summary>Y-coordinate of the top left corner</summary>
        [Newtonsoft.Json.JsonProperty("tl_y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Tl_y { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Class 
    {
        /// <summary>Class name. Can be: car, truck or bus</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClassName Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("probability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Probability { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Subclass 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubclassName Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("probability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double Probability { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Status 
    {
        /// <summary>Possible values are:
        /// 
        /// - 0 - content of bounding box was successfully processed
        /// - 22 - Bounding box was skipped. Width is %d which is less than box_min_width %d
        /// - 23 - Bounding box was skipped. Height is %d which is less than box_min_height %d
        /// - 24 - Bounding box was skipped. Width/Height ratio is %f which is less than box_min_ratio %f
        /// - 25 - Bounding box was skipped. Width/Height ratio is %f which is greater than box_max_ratio %f
        /// - 26 - Bounding box was skipped. Box is closer to the image edge than box_offset %d
        /// - 31 - Bounding box was skipped. Box was not selected according to the currently active selection strategy: %s
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusCode Code { get; set; }
    
        /// <summary>Specifies if bounding box was selected for further processing</summary>
        [Newtonsoft.Json.JsonProperty("selected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Selected { get; set; }
    
        /// <summary>Contains explanation for code value if it does not equal 0</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Mm 
    {
        [Newtonsoft.Json.JsonProperty("make_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Make_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("make_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Make_name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("model_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Model_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("model_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model_name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("probability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Probability { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Mmg 
    {
        [Newtonsoft.Json.JsonProperty("make_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Make_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("make_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Make_name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("model_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Model_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("model_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model_name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("generation_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Generation_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("generation_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generation_name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("years", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Years { get; set; }
    
        [Newtonsoft.Json.JsonProperty("probability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Probability { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Color 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("probability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Probability { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Angle 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AngleName Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("probability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Probability { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Parameters 
    {
        [Newtonsoft.Json.JsonProperty("box_max_ratio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Box_max_ratio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("box_min_height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Box_min_height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("box_min_ratio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Box_min_ratio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("box_min_width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Box_min_width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("box_offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Box_offset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("box_select", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParametersBox_select Box_select { get; set; }
    
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Features> Features { get; set; }
    
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Region2> Region { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ClassName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"car")]
        Car = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"truck")]
        Truck = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bus")]
        Bus = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SubclassName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"vehicle")]
        Vehicle = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"interior")]
        Interior = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dashboard")]
        Dashboard = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"wheel")]
        Wheel = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"body part")]
        Body_part = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"unidentifiable")]
        Unidentifiable = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StatusCode
    {
        _0 = 0,
    
        _22 = 22,
    
        _23 = 23,
    
        _24 = 24,
    
        _25 = 25,
    
        _26 = 26,
    
        _31 = 31,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AngleName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"front")]
        Front = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"front-left")]
        FrontLeft = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"left")]
        Left = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"back-left")]
        BackLeft = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"back")]
        Back = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"back-right")]
        BackRight = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"right")]
        Right = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"front-right")]
        FrontRight = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ParametersBox_select
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"center")]
        Center = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"largest")]
        Largest = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Features
    {
        [System.Runtime.Serialization.EnumMember(Value = @"mm")]
        Mm = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"mmg")]
        Mmg = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"color")]
        Color = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"angle")]
        Angle = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Region2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CIS")]
        CIS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DEF")]
        DEF = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EU")]
        EU = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 3,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108